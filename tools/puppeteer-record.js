/*
puppeteer-record.js - captures /projector to PNG frames (then ffmpeg to MP4)
Usage: node puppeteer-record.js http://localhost:5173/projector outdir 30
*/
const puppeteer = require('puppeteer'); const fs=require('fs'); (async()=>{ const url=process.argv[2]||'http://localhost:5173/projector'; const out=process.argv[3]||'frames'; const seconds=Number(process.argv[4]||30); if(!fs.existsSync(out)) fs.mkdirSync(out); const browser=await puppeteer.launch({headless:true,args:['--no-sandbox','--disable-setuid-sandbox']}); const page=await browser.newPage(); await page.setViewport({width:1920,height:1080}); await page.goto(url,{waitUntil:'networkidle2'}); await page.waitForTimeout(1500); await page.evaluate(()=>{ const bc=new BroadcastChannel('kardi-cue'); bc.postMessage('cue'); }); let frames=0; const client = await page.target().createCDPSession(); await client.send('Page.startScreencast',{format:'png',everyNthFrame:1}); client.on('Page.screencastFrame', async (event)=>{ frames++; const buf=Buffer.from(event.data,'base64'); fs.writeFileSync(`${out}/frame_${String(frames).padStart(5,'0')}.png`,buf); await client.send('Page.screencastFrameAck',{sessionId:event.sessionId}); }); await new Promise(r=>setTimeout(r, seconds*1000)); await client.send('Page.stopScreencast'); await browser.close(); console.log('captured', frames); })();
